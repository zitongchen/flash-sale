#mybatis
mybatis.config-location=classpath:mybatis-config.xml
# 应用名称
spring.application.name=flash-sale
# 应用服务 WEB 访问端口
server.port=8090
server.servlet.context-path=/api
spring.profiles.active=local

#指定Mybatis的Mapper文件
mybatis.mapper-locations=classpath:mappers/*xml
#指定Mybatis的实体目录
mybatis.type-aliases-package=com.actionworks.flashsale.mybatis.entity
# Sentinel 控制台地址
spring.cloud.sentinel.transport.dashboard=127.0.0.1:8858
# 取消Sentinel控制台懒加载
# 默认情况下 Sentinel 会在客户端首次调用的时候进行初始化，开始向控制台发送心跳包
# 配置 sentinel.eager=true 时，取消Sentinel控制台懒加载功能
spring.cloud.sentinel.eager=true
# spring.cloud.sentinel.transport.client-ip=
spring.cloud.sentinel.datasource.ds1.nacos.server-addr=127.0.0.1:8848
spring.cloud.sentinel.datasource.ds1.nacos.group-id=THOUGHTS-BETA-GROUP
spring.cloud.sentinel.datasource.ds1.nacos.data-id=THOUGHTS-BETA-SENTINEL-FLOW-CONFIGURATION
spring.cloud.sentinel.datasource.ds1.nacos.data-type=json
spring.cloud.sentinel.datasource.ds1.nacos.rule-type=flow
spring.cloud.sentinel.datasource.ds1.nacos.username=nacos
spring.cloud.sentinel.datasource.ds1.nacos.password=nacos

spring.cloud.sentinel.datasource.ds2.nacos.server-addr=127.0.0.1:8848
spring.cloud.sentinel.datasource.ds2.nacos.group-id=THOUGHTS-BETA-GROUP
spring.cloud.sentinel.datasource.ds2.nacos.data-id=THOUGHTS-BETA-SENTINEL-DEGRADE-CONFIGURATION
spring.cloud.sentinel.datasource.ds2.nacos.data-type=json
spring.cloud.sentinel.datasource.ds2.nacos.rule-type=degrade
spring.cloud.sentinel.datasource.ds2.nacos.username=nacos
spring.cloud.sentinel.datasource.ds2.nacos.password=nacos

#Redis配置
spring.redis.host=127.0.0.1
#Redis服务器连接端口
spring.redis.port=6379
#Redis服务器连接密码（默认为空）
spring.redis.password=
#连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
#连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
#连接池中的最大空闲连接
spring.redis.pool.max-idle=8
#连接池中的最小空闲连接
spring.redis.pool.min-idle=0
#连接超时时间（毫秒）
spring.redis.timeout=30000
spring.redis.address=redis://127.0.0.1:6379


management.metrics.export.datadog.enabled=false
management.endpoints.web.exposure.include=*
management.metrics.tags.application=${spring.application.name}
management.security.enabled=false
management.metrics.export.prometheus.enabled=true
management.metrics.export.jmx.enabled=true

logging.config=classpath:logback-spring.xml


server.tomcat.threads.max= 500

rocketmq.name-server=127.0.0.1:9876
rocketmq.placeorder.producer.group=PLACE_ORDER_TASK_TOPIC_PRODUCER_GROUP
rocketmq.placeorder.topic=PLACE_ORDER_TASK_TOPIC

# 下单方式：normal=默认限流并发竞争，queued=有序队列方式，buckets=分桶库存
place_order_type = normal


spring.shardingsphere.sharding.default-data-source-name=ds
spring.shardingsphere.datasource.ds.type=org.apache.commons.dbcp2.BasicDataSource
spring.shardingsphere.datasource.ds.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds.url=jdbc:mysql://127.0.0.1:3306/flash_sale?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8
spring.shardingsphere.datasource.ds.username=thoughts-beta
spring.shardingsphere.datasource.ds.password=thoughts-beta

# 分库分表相关配置

spring.shardingsphere.datasource.names=ds,ds0,ds1
spring.shardingsphere.datasource.ds0.type=org.apache.commons.dbcp2.BasicDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://127.0.0.1:3306/flash_sale_0?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8
spring.shardingsphere.datasource.ds0.username=thoughts-beta
spring.shardingsphere.datasource.ds0.password=thoughts-beta

spring.shardingsphere.datasource.ds1.type=org.apache.commons.dbcp2.BasicDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://127.0.0.1:3306/flash_sale_1?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8
spring.shardingsphere.datasource.ds1.username=thoughts-beta
spring.shardingsphere.datasource.ds1.password=thoughts-beta

spring.shardingsphere.sharding.tables.flash_bucket.database-strategy.inline.sharding-column=item_id
spring.shardingsphere.sharding.tables.flash_bucket.database-strategy.inline.algorithm-expression=ds$->{item_id % 2}
spring.shardingsphere.sharding.tables.flash_bucket.actualDataNodes=ds${0..1}.flash_bucket_${0..2}
spring.shardingsphere.sharding.tables.flash_bucket.tableStrategy.inline.shardingColumn=item_id
spring.shardingsphere.sharding.tables.flash_bucket.tableStrategy.inline.algorithm-expression=flash_bucket_${item_id % 3}
spring.shardingsphere.sharding.tables.flash_bucket.key-generator.column=id
spring.shardingsphere.sharding.tables.flash_bucket.key-generator.type=SNOWFLAKE

spring.shardingsphere.sharding.tables.flash_order.database-strategy.inline.sharding-column=item_id
spring.shardingsphere.sharding.tables.flash_order.database-strategy.inline.algorithm-expression=ds$->{item_id % 2}
spring.shardingsphere.sharding.tables.flash_order.actual-data-nodes=ds${0..1}.flash_order_${0..2}
spring.shardingsphere.sharding.tables.flash_order.tableStrategy.inline.shardingColumn=item_id
spring.shardingsphere.sharding.tables.flash_order.tableStrategy.inline.algorithm-expression=flash_order_${item_id % 3}
spring.shardingsphere.props.sql.show= false

spring.logstash.host=127.0.0.1
spring.cloud.nacos.config.server-addr=127.0.0.1:8848
spring.cloud.nacos.config.file-extension=json



